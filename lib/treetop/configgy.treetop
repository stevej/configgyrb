grammar Treetop_Configgy
  rule root
    d:declaration* whitespace* {
      def apply(config_map, parser)
        d.elements.each { |node| node.apply(config_map, parser) }
      end
    }
  end

  rule declaration
    whitespace* d:(include_file / assignment / toggle / section) {
      def apply(config_map, parser)
        d.apply(config_map, parser)
      end
    }
  end

  rule assignment
    identifier whitespace* op:("=" / "?=") whitespace* value {
      def apply(config_map, parser)
        key = identifier.text_value
        if (op.text_value == "=") or !config_map.has_key?(key)
          config_map[key] = value.to_value(config_map)
        end
      end
    }
  end

  rule toggle
    identifier whitespace* true_false {
      def apply(config_map, parser)
        key = identifier.text_value
        config_map[key] = true_false.to_value
      end
    }
  end

  rule value
    number / string / true_false / string_list
  end

  rule whitespace
    (" " / "\t" / "\n" / "#" [^\n]* "\n")
  end

  rule number
    "-"? [0-9]+ decimal:("." [0-9]+)? {
      def to_value(config_map=nil)
        decimal.text_value.empty? ? text_value.to_i : text_value.to_f
      end
    }
  end

  rule string
    "\"" raw:string_innards* "\"" {
      def to_value(config_map=nil)
        rv = raw.elements.inject("") { |total, segment| total + segment.unquoted }
        config_map ? config_map.interpolate(rv) : rv
      end
    }
  end

  rule string_innards
    [^\\\"]+ {
      def unquoted
        text_value
      end
    } / "\\" quoted_entity {
      def unquoted
        quoted_entity.unquoted
      end
    }
  end

  rule quoted_entity
    [^ux] {
      def unquoted
        case text_value
          when "r" then "\r"
          when "n" then "\n"
          when "t" then "\t"
          when "$" then "\\$"
          else text_value
        end
      end
    } / "u" digits:(hex_digit hex_digit hex_digit hex_digit) {
      def unquoted
        [ digits.text_value.to_i(16) ].pack("U")
      end
    } / "x" digits:(hex_digit hex_digit) {
      def unquoted
        digits.text_value.to_i(16).chr
      end
    }
  end

  rule hex_digit
    [0-9a-fA-F]
  end

  rule true_false
    "true" {
      def to_value(config_map=nil)
        true
      end
    } / "on" {
      def to_value(config_map=nil)
        true
      end
    } / "false" {
      def to_value(config_map=nil)
        false
      end
    } / "off" {
      def to_value(config_map=nil)
        false
      end
    }
  end

  rule string_list
    "[" whitespace* list:(item:(string / number) (whitespace* ",")? whitespace*)* "]" {
      def to_value(config_map=nil)
        list.elements.map { |e| e.item.to_value(config_map) }
      end
    }
  end

  rule identifier
    identifier_token ("\." identifier_token)*
  end

  rule identifier_token
    ([a-zA-Z] [-a-zA-Z_]*)
  end

  rule section
    identifier_token whitespace* attribute_list:("(" whitespace* attributes:(tag_attribute whitespace*)* ")")? whitespace* "{" root "}" {
      def apply(config_map, parser)
        new_name = identifier_token.text_value
        nested_config_map = Configgy::ConfigMap.new(config_map.root, config_map.name == "" ? new_name : config_map.name + "." + new_name)
        if attribute_list.elements
          attribute_list.attributes.elements.map { |e| e.tag_attribute }.each do |attr|
            case attr.name.text_value
            when "inherit"
              v = attr.value.to_value
              if config_map[v].instance_of?(Configgy::ConfigMap)
                nested_config_map.inherit_from = config_map[v]
              elsif config_map.root
                config_map.root[v] = Configgy::ConfigMap.new(config_map.root, v) unless config_map.root.has_key?(v)
                if config_map.root[v].instance_of?(Configgy::ConfigMap)
                  nested_config_map.inherit_from = config_map.root[v]
                else
                  raise ConfigException("can only inherit from blocks")
                end
              end
            end
          end
        end
        config_map[new_name] = nested_config_map
        root.apply(nested_config_map, parser)
      end
    }
  end

  rule tag_attribute
    name:"inherit" "=" value:string
  end

  rule include_file
    "include" whitespace* string {
      def apply(config_map, parser)
        parser.load_file(string.to_value, config_map)
      end
    }
  end
end
